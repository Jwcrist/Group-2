\documentclass{article}
\usepackage[vmargin=1in,hmargin=1in]{geometry}
\usepackage{booktabs}
\begin{document}
<<include=FALSE>>=
opts_chunk$set(fig.align='center',message=FALSE, cache=FALSE)
@
\begin{center}
\large \textsc{Homework 2} \\
STAT 4410/8416 Section 001\\
\textsc{Fall 2014}\\
Due: September 26, 2014 by midnight
\normalsize
\end{center}
\begin{enumerate}
\item  We generate a $n$x$k$ matrix $M$ and a vector $V$ of length $k$ for some specific values of $n$ and $k$ as follows;
<<>>=
set.seed(4286)
n <- 4
k <- 5
V <- sample(seq(4), size=k, replace=TRUE)
M <- matrix(rnorm(n*k), ncol=k)
@
\begin{enumerate}
\item Now, carefully review the following for loop. Rewrite the code that does the same job but doesn't use a for loop.
<<>>=
X <- M
for(i in seq(n)){
X[i,] <- round(M[i,]/V,2)
}
@
\textbf{ANSWER 1a.}  \\
<<>>=
X
library(plyr)
round(aaply(M, 1, "/", V),2)
@
\item Now do the same experiment for $n=400$ and $k=500$. Which code runs faster, your code or the for loop? Demonstrate that using function \texttt{system.time()}.\\
\textbf{ANSWER 1b.}  \\
<<>>=
library(plyr)
set.seed(4250)
n2 <- 400
k2 <- 500
V2 <- sample(seq(4), size=k2, replace=TRUE)
M2 <- matrix(rnorm(n2*k2), ncol=k2)
system.time(round(aaply(M2, 1, "/", V2),2))
X2b <- M2
system.time(
for(i in seq(n2)){
X2b[i,] <- round(M2[i,]/V2,2)
}
)
@
\textbf{My code is slower.} \\
\end{enumerate}
\item The data set \texttt{chickwts} contains the Chicken Weights by Feed Type. Draw a side by side boxplot of weight for each feed type. Order the feed type based on the median weight. Provide your codes and the plot. Which food type is responsible for highest median weight of the chicken? \\
\textbf{ANSWER 2.}  \\
For fun and educational purposes two ways of demonstrating boxplots are shown:
<<fig.height=4, out.width='.75\\linewidth',echo=TRUE>>=
library(plyr)
library(ggplot2)
data(chickwts)
tail(chickwts)
median(chickwts$weight)
p<-ggplot(chickwts,aes(chickwts$feed,chickwts$weight))
p+geom_boxplot()
bymedian <- with(chickwts, reorder(feed, -weight, median))
bymedian
boxplot(weight~bymedian, data=chickwts,
xlab="Feed", ylab="Weight",
main="Relationship of Chicken Weights to Type of Feed", varwidth=TRUE,
col="lightgray")
@
\item We want to generate a plot of US arrest data (USArrests). Please provide the detailed codes to answer the following questions.
\begin{enumerate}
\item Obtain USA state boundary coordinates data for USA map using function \texttt{map\_data()} and store the data in \texttt{mdat}. Display first few data from \texttt{mdat} and notice that there is a column called \texttt{order} that contains the true order of coordinates.\\
\textbf{ANSWER 3a.}  \\
<<>>=
library(maps)
mdat=map_data("state")
tail(mdat)
@
\item \label{standardize-rate} You will find USA crime data in the data frame called \texttt{USArrests}. Standardize the crime rates and create a new column called \texttt{state} so that all the state names are lower case. Store the new data in \texttt{arrest} and report first few data.\\
\textbf{ANSWER 3b.}  \\
<<>>=
data(USArrests)
tail(USArrests)
state<-rownames(USArrests)
state<-tolower(state)
crimes<-cbind(Murder=USArrests$Murder,Assault=USArrests$Assault,
UrbanPop=USArrests$UrbanPop,Rape=USArrests$Rape)
head(crimes)
#Rounded to 8th placement for nice formatting
crimes<-round(scale(crimes),8)
arrest<-cbind(state,crimes)
head(arrest)
@
\item \label{order-data} Merge the two data sets \texttt{mdat} and \texttt{arrest} by state name. Merging will change the order of coordinates data. So, order the data back to the original order and store the merged-ordered data in \texttt{odat}. Report first few data from \texttt{odat}.
\textbf{ANSWER 3b.}  \\
<<>>=
Merge<-merge(mdat,arrest,fix.by=state)
head(Merge)
odat<-order(data=Merge, desc(Merge$long))
#Match
head(odat,3)
head(mdat,3)
#Win
@
\item All the columns of \texttt{odat} is not necessary for our analysis. So, subset by selecting only columns long, lat, group, region, Murder, Assault, UrbanPop, Rape. Store the data in \texttt{sdat} and report first few rows.
\item Melt the data frame \texttt{sdat} with id variables long, lat, group, region. Store the molten data in \texttt{msdat} and report first few rows of data.
\item \label{plot-crime} The molten data frame \texttt{msdat} is now ready to be plotted. Create a plot showing USA state map, fill with value and facet\_wrap with variable. Please don't add any legend and make sure that faceting labels are identified so that we can compare the facetted plots.
\item Now examine the plot you have generated in question (\ref{plot-crime}) and answer the following questions based on what you see in the plot.
\begin{enumerate}
\item For each of the crimes, name two states with the highest crime rate.\\
\item Do you think larger urban population is an indicative of larger murder rate? Why or why not? \\
\end{enumerate}
\item In question (\ref{standardize-rate}) we standardized the crime rates. Why do you think we did this? Explain what would happen if we would not do this.
\item In question (\ref{order-data}) we ordered the data after merging. Why do you think we have to order? Explain what would happen if we would not order.
\end{enumerate}
\item For the following questions please use data frame \texttt{tips}
\begin{enumerate}
\item \label{bar} Create a bar chart that shows average tip by day.
\item Compute the average tip, total tip and average size grouped by smoker and day. i.e.,  For each combination of smoker and day you should have a row of these summaries. Report the result in a nice table.
\item \label{bar-facet} Create a bar chart that shows average tip by day and also faceted by smoker.
\item In questions \ref{bar} and \ref{bar-facet} we plotted the summary of data which does not show us the whole picture. In practice we like to see the whole data. What plot do you suggest to serve the same purpose similar to what we did in question \ref{bar-facet}? In other words, what would be a better plot to show tips by day and facetted by smoker? Please produce that plot and include your codes.
\end{enumerate}
\item Life expectancy data for four countries are obtained from the world bank database which you will find on blackboard. It contains life expectancy in years for different genders. Download the data from the blackboard and save it on your hard drive. Now answer the following questions.
\begin{enumerate}
\item Read the file from your hard drive and display first few rows of the data.
\item \label{life} Generate a plot showing trend line of life expectancy over different year. Color them by sex and facet by country. Include your code and the plot.
\item Explain what interesting features you notice in the plot of question \ref{life}.
\end{enumerate}
\end{enumerate}
\end{document}
odat<-order(data=Merge, desc(Merge$long))
length(Merger)
length(Merge)
length(Merge$long)
head(Merge)
tail(Merge)
data(USArrests)
tail(USArrests)
state<-rownames(USArrests)
state<-tolower(state)
crimes<-cbind(Murder=USArrests$Murder,Assault=USArrests$Assault,
UrbanPop=USArrests$UrbanPop,Rape=USArrests$Rape)
head(crimes)
#Rounded to 8th placement for nice formatting
crimes<-round(scale(crimes),8)
arrest<-cbind(state,crimes)
head(arrest)
@
\item \label{order-data} Merge the two data sets \texttt{mdat} and \texttt{arrest} by state name. Merging will change the order of coordinates data. So, order the data back to the original order and store the merged-ordered data in \texttt{odat}. Report first few data from \texttt{odat}.
\textbf{ANSWER 3b.}  \\
opts_chunk$set(fig.align='center',message=FALSE, cache=FALSE)
Merge<-merge(mdat,arrest,fix.by=state)
library(maps)
mdat=map_data("state")
tail(mdat)
Merge<-merge(mdat,arrest,fix.by=state)
head(Merge)
tail(Merge)
odat<-order(data=Merge, desc(Merge$long))
Merge<-data.table(Merge)
library(data.table)
Merge<-data.table(Merge)
odat<-arrange(Merge, long)
odat
tail(odat)
tail(mdat)
odat<-arrange(Merge, desc(long))
tail(odat)
tail(mdat)
odat<-arrange(Merge, desc(order))
tail(odat)
tail(mdat)
odat<-arrange(Merge, order)
tail(odat)
tail(mdat)
head(arrest)
tail(mdat)
tail(mdat,30)
("state")
tail(mdat,30)
head(mdat,30)
mdat$region="state"
library(data.table)
Merge<-data.table(Merge)
odat<-arrange(Merge, order)
tail(odat)
names(mdat)[5]<-paste("state")
Merge<-data.table(Merge)
library(data.table)
names(mdat)[5]<-paste("state")
Merge<-merge(mdat,arrest,fix.by=state)
Merge<-data.table(Merge)
odat<-arrange(Merge, order)
tail(odat)
tail(mdat)
head(odat)
msdat<-melt(sdat,state:long)
library(reshape2)
msdat<-melt(sdat,state:long)
library(dplyr)
sdat<-select(odat, state:group,Murder:Rape)
head(sdat)
library(reshape2)
msdat<-melt(sdat,state:long)
msdat<-melt(sdat,state:group)
msdat<-melt(sdat,'state':'group')
msdat<-melt(sdat,'long','lat','group','state')
library(ggplot2)
ggplot(msdat, aes(x=long,y=lat,group=group))+grom_polygon(aes(fill=value))+facet_wrap(vaiable)
\documentclass{article}
\usepackage[vmargin=1in,hmargin=1in]{geometry}
\usepackage{booktabs}
\begin{document}
<<include=FALSE>>=
opts_chunk$set(fig.align='center',message=FALSE, cache=FALSE)
@
\begin{center}
\large \textsc{Homework 2} \\
STAT 4410/8416 Section 001\\
\textsc{Fall 2014}\\
Due: September 26, 2014 by midnight
\normalsize
\end{center}
\begin{enumerate}
\item  We generate a $n$x$k$ matrix $M$ and a vector $V$ of length $k$ for some specific values of $n$ and $k$ as follows;
<<>>=
set.seed(4286)
n <- 4
k <- 5
V <- sample(seq(4), size=k, replace=TRUE)
M <- matrix(rnorm(n*k), ncol=k)
@
\begin{enumerate}
\item Now, carefully review the following for loop. Rewrite the code that does the same job but doesn't use a for loop.
<<>>=
X <- M
for(i in seq(n)){
X[i,] <- round(M[i,]/V,2)
}
@
\textbf{ANSWER 1a.}  \\
<<>>=
X
library(plyr)
round(aaply(M, 1, "/", V),2)
@
\item Now do the same experiment for $n=400$ and $k=500$. Which code runs faster, your code or the for loop? Demonstrate that using function \texttt{system.time()}.\\
\textbf{ANSWER 1b.}  \\
<<>>=
library(plyr)
set.seed(4250)
n2 <- 400
k2 <- 500
V2 <- sample(seq(4), size=k2, replace=TRUE)
M2 <- matrix(rnorm(n2*k2), ncol=k2)
system.time(round(aaply(M2, 1, "/", V2),2))
X2b <- M2
system.time(
for(i in seq(n2)){
X2b[i,] <- round(M2[i,]/V2,2)
}
)
@
\textbf{My code is slower.} \\
\end{enumerate}
\item The data set \texttt{chickwts} contains the Chicken Weights by Feed Type. Draw a side by side boxplot of weight for each feed type. Order the feed type based on the median weight. Provide your codes and the plot. Which food type is responsible for highest median weight of the chicken? \\
\textbf{ANSWER 2.}  \\
For fun and educational purposes two ways of demonstrating boxplots are shown:
<<fig.height=4, out.width='.75\\linewidth',echo=TRUE>>=
library(plyr)
library(ggplot2)
data(chickwts)
tail(chickwts)
median(chickwts$weight)
p<-ggplot(chickwts,aes(chickwts$feed,chickwts$weight))
p+geom_boxplot()
bymedian <- with(chickwts, reorder(feed, -weight, median))
bymedian
boxplot(weight~bymedian, data=chickwts,
xlab="Feed", ylab="Weight",
main="Relationship of Chicken Weights to Type of Feed", varwidth=TRUE,
col="lightgray")
@
\item We want to generate a plot of US arrest data (USArrests). Please provide the detailed codes to answer the following questions.
\begin{enumerate}
\item Obtain USA state boundary coordinates data for USA map using function \texttt{map\_data()} and store the data in \texttt{mdat}. Display first few data from \texttt{mdat} and notice that there is a column called \texttt{order} that contains the true order of coordinates.\\
\textbf{ANSWER 3a.}  \\
<<>>=
library(maps)
mdat=map_data("state")
tail(mdat,5)
@
\item \label{standardize-rate} You will find USA crime data in the data frame called \texttt{USArrests}. Standardize the crime rates and create a new column called \texttt{state} so that all the state names are lower case. Store the new data in \texttt{arrest} and report first few data.\\
\textbf{ANSWER 3b.}  \\
<<>>=
data(USArrests)
tail(USArrests)
state<-rownames(USArrests)
state<-tolower(state)
crimes<-cbind(Murder=USArrests$Murder,Assault=USArrests$Assault,
UrbanPop=USArrests$UrbanPop,Rape=USArrests$Rape)
head(crimes)
#Rounded to 8th placement for nice formatting
crimes<-round(scale(crimes),8)
arrest<-cbind(state,crimes)
head(arrest,5)
@
\item \label{order-data} Merge the two data sets \texttt{mdat} and \texttt{arrest} by state name. Merging will change the order of coordinates data. So, order the data back to the original order and store the merged-ordered data in \texttt{odat}. Report first few data from \texttt{odat}.
\textbf{ANSWER 3c.}  \\
<<>>=
library(data.table)
names(mdat)[5]<-paste("state")
Merge<-merge(mdat,arrest,fix.by=state)
Merge<-data.table(Merge)
odat<-arrange(Merge, order)
head(odat,5)
head(mdat,5)
@
\item All the columns of \texttt{odat} is not necessary for our analysis. So, subset by selecting only columns long, lat, group, region, Murder, Assault, UrbanPop, Rape. Store the data in \texttt{sdat} and report first few rows. \\
\textbf{ANSWER 3d.} \\
(From c) Region was changed to state for uniformity.
<<>>=
library(dplyr)
sdat<-select(odat, state:group,Murder:Rape)
head(sdat,5)
@
\item Melt the data frame \texttt{sdat} with id variables long, lat, group, region. Store the molten data in \texttt{msdat} and report first few rows of data.
\textbf{ASNWER 3e.} \\
<<warning=FALSE>>=
library(reshape2)
msdat<-melt(sdat[,list(long,lat,group,state)])
head(msdat,5)
@
\item \label{plot-crime} The molten data frame \texttt{msdat} is now ready to be plotted. Create a plot showing USA state map, fill with value and facet\_wrap with variable. Please don't add any legend and make sure that faceting labels are identified so that we can compare the facetted plots.
\textbf{ANSWER 3f} \\
<<>>=
library(ggplot2)
ggplot(msdat, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=msdat$value))+
facet_wrap(msdat$variable)
@
\item Now examine the plot you have generated in question (\ref{plot-crime}) and answer the following questions based on what you see in the plot.
\begin{enumerate}
\item For each of the crimes, name two states with the highest crime rate.\\
\item Do you think larger urban population is an indicative of larger murder rate? Why or why not? \\
\end{enumerate}
\item In question (\ref{standardize-rate}) we standardized the crime rates. Why do you think we did this? Explain what would happen if we would not do this.
\item In question (\ref{order-data}) we ordered the data after merging. Why do you think we have to order? Explain what would happen if we would not order.
\end{enumerate}
\item For the following questions please use data frame \texttt{tips}
\begin{enumerate}
\item \label{bar} Create a bar chart that shows average tip by day.
\item Compute the average tip, total tip and average size grouped by smoker and day. i.e.,  For each combination of smoker and day you should have a row of these summaries. Report the result in a nice table.
\item \label{bar-facet} Create a bar chart that shows average tip by day and also faceted by smoker.
\item In questions \ref{bar} and \ref{bar-facet} we plotted the summary of data which does not show us the whole picture. In practice we like to see the whole data. What plot do you suggest to serve the same purpose similar to what we did in question \ref{bar-facet}? In other words, what would be a better plot to show tips by day and facetted by smoker? Please produce that plot and include your codes.
\end{enumerate}
\item Life expectancy data for four countries are obtained from the world bank database which you will find on blackboard. It contains life expectancy in years for different genders. Download the data from the blackboard and save it on your hard drive. Now answer the following questions.
\begin{enumerate}
\item Read the file from your hard drive and display first few rows of the data.
\item \label{life} Generate a plot showing trend line of life expectancy over different year. Color them by sex and facet by country. Include your code and the plot.
\item Explain what interesting features you notice in the plot of question \ref{life}.
\end{enumerate}
\end{enumerate}
\end{document}
ggplot(msdat, aes(x=long,y=lat,group=group))+
geom_polygon(aes(fill=msdat$value))+
facet_wrap(msdat$variable)
us.dat <- map_data("state")
head(us.dat)
us.dat <- map_data("state")
ggplot(us.dat, aes(x=long, y=lat, group=group)) + geom_polygon(fill="grey65", colour = alpha("white", 1/2), size = 0.2) + theme_bw() + theme(legend.position = "none", text = element_blank(), line = element_blank()) + coord_map("polyconic")
@
ggplot(us.dat, aes(x=long, y=lat, group=group)) + geom_polygon(fill="grey65", colour = alpha("white", 1/2), size = 0.2) + theme_bw() + theme(legend.position = "none", text = element_blank(), line = element_blank()) + coord_map("polyconic")
library(maps)
us.dat <- map_data("state")
ggplot(us.dat, aes(x=long, y=lat, group=group)) + geom_polygon(fill="grey65", colour = alpha("white", 1/2), size = 0.2) + theme_bw() + theme(legend.position = "none", text = element_blank(), line = element_blank()) + coord_map("polyconic")
ggplot(us.dat, aes(x=long, y=lat, group=group)) + geom_polygon(fill="grey65", color = ("white", 1/2), size = 0.2) + theme_bw() + theme(legend.position = "none", text = element_blank(), line = element_blank()) + coord_map("polyconic")
ggplot(us.dat, aes(x=long, y=lat, group=group)) + geom_polygon(fill="grey65", color = "white", size = 0.2) + theme_bw() + theme(legend.position = "none", text = element_blank(), line = element_blank()) + coord_map("polyconic")
tips <- read.csv("http://www.ggobi.org/book/data/tips.csv")
head(tips)
geom_bar(tips$tip)
geom_bar(tips, aes(tip)
geom_bar(tips, aes(tip))
class(tips)
geom_bar(tips, aes(tip))
geom_bar(tips, aes(tips$tip))
class(tips$tip)
geom_bar(tips, aes(factor(tip))
geom_bar(tips, aes(factor(tip)))
geom_bar(tips, aes(factor(tip),fill=day))
ggplot(tips, aes(factor(tip),fill=day))+geom_bar()
ggplot(tips, aes(tip,fill=day))+geom_bar()
ggplot(tips, aes(mean(tip),fill=day))+geom_bar()
ggplot(tips, aes(mean(tip),fill=day))+geom_bar()+dev.off()
library(ggplot2)
tips <- read.csv("http://www.ggobi.org/book/data/tips.csv")
head(tips)
ggplot(tips, aes(mean(tip),fill=day))+geom_bar()+dev.off()
ggplot(tips, aes(mean(tip),fill=day))+geom_bar()
ggplot(tips, aes(mean(tip)))+geom_bar()+facet_wrap(~day)
ggplot(tips, aes(mean(tip), fill=day))+geom_bar()+facet_wrap(~day)
ggplot(tips, aes(mean(tip), fill=day))+geom_bar()+facet_grid(~day)
myColumns <- c("tip", "day", "size")
tips[indx, myColumns]
tips <- read.csv("http://www.ggobi.org/book/data/tips.csv")
head(tips)
myColumns <- c("tip", "day", "size")
tips[indx, myColumns]
tips[myColumns]
ggplot(tips, aes(mean(tip), fill=day))+geom_bar()+facet_grid(~day)
head(tips[myColumns])
tapply(tip,day,mean)
tapply(tips,tip,mean)
tapply(tips,tips$tip,mean)
tapply(day,tips$tip,mean)
tapply(tips$day,tips$tip,mean)
tapply(tips$tip,tips$day,mean)
ggplot(byday))+geom_bar(
ggplot(byday))+geom_bar()
ggplot(byday)+geom_bar()
byday<-tapply(tips$tip,tips$day,mean)
ggplot(byday)+geom_bar()
byday<-data.frame(byday)
ggplot(byday)+geom_bar()
ggplot(byday, aes(x=x, y=y))+geom_bar()
ggplot(byday, aes(x=byday))+geom_bar()
byday<-data.frame(byday, header=T)
ggplot(byday, aes(x=byday))+geom_bar()
byday<-data.frame(melt(byday, header=T))
byday<-data.frame(melt(byday))
byday<-data.frame(melt(byday))
byday
tips <- read.csv("http://www.ggobi.org/book/data/tips.csv")
myColumns <- c("tip", "day", "size")
head(tips[myColumns])
byday<-tapply(tips$tip,tips$day,mean)
byday<-data.frame(melt(byday))
byday
ggplot(byday, aes(x=Var1))+geom_bar()
ggplot(byday, aes(x=Var1, y=value))+geom_bar()
ggplot(byday, aes(x=Var1, fill=value))+geom_bar()
ggplot(byday, aes(x=Var1, y=0:3, fill=value))+geom_bar(value)
ggplot(byday, aes(x=Var1, fill=value))+geom_bar(value)
ggplot(byday, aes(x=Var1, fill=value))+geom_bar()+facet_wrap(value)
ggplot(byday, aes(x=Var1, fill=value))+geom_bar()+facet_wrap(byday$value)
ggplot(byday, aes(x=Var1))+geom_bar()+facet_wrap(byday$value)
ggplot(byday, aes(x=Var1))+geom_bar()+facet_wrap(value)
byday
ggplot(byday, aes(x=Var1))+geom_bar()+facet_wrap(value)
ggplot(byday, aes(x=Var1))+geom_bar()+facet_wrap(byday$value)
ggplot(byday, aes(x=value))+geom_bar()+facet_wrap(Var1)
ggplot(byday, aes(x=value))+geom_bar()+facet_wrap(byday$Var1)
ggplot(byday, aes(x=value))+geom_bar()
ggplot(byday, aes(x=Var1))+geom_bar()
class(byday$value)
qplot(Var1,data=byday,geom="bar")
qplot(data=byday,geom="bar")
qplot(x=Var1, y=value,data=byday,geom="bar")
ggplot(byday, aes(x=Var1))+geom_bar(stat=identity)
ggplot(byday, aes(x=Var1))+geom_bar(stat="identity")
ggplot(byday, aes(x=Var1))+geom_bar(stat="identity")
myColumns <- c("tip", "day")
head(tips[myColumns])
byday<-tapply(tips$tip,tips$day,mean)
byday<-data.frame(melt(byday))
byday
class(byday$value)
ggplot(byday, aes(x=Var1))+geom_bar(stat="identity")
ggplot(byday, aes(Var1, value))+geom_bar(stat="identity")
byday<-order(byday,by=value)
byday<-order(byday,by="value")
byday<-with(byday,reorder(-value))
byday<-with(byday,reorder(,-value,))
byday<-with(byday,reorder(,,value))
byday<-data.frame(melt(byday))
class(byday$value)
ggplot(byday, aes(Var1, value))+geom_bar(stat="identity")
@
ggplot(byday, aes(Var1, value), color=value)+geom_bar(stat="identity")
ggplot(byday, aes(Var1, value)+geom_bar(stat="identity")
ggplot(byday, aes(Var1, value))+geom_bar(stat="identity")
@
ggplot(byday, aes(Var1, value))+geom_bar(stat="identity")
ggplot(byday, aes(Var1,value))+geom_bar(stat="identity")
byday<-reoder(byday$value,byday$Var1)
byday<-reorder(byday$value,byday$Var1)
class(byday$value)
byday<-reorder(byday$value)
byday<-reorder(byday,value)
byday<-reorder(byday,y=value,x=Var1)
